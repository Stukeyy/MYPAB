image: php:7.4

stages:
  - install
  - lint
  - integrate
  - deploy
  - trigger


install:
  stage: install
  image: composer:latest
  tags:
    - project
  before_script:
    - echo "Install Stage"
    - composer
  script:
    - composer install
  only:
    - newpipe


lint:
  stage: lint
  image: composer:latest
  tags:
    - project
  before_script:
    - echo "Lint Stage"
  script:
    - composer require overtrue/phplint:^3.0 --dev -vvv
    - ./vendor/bin/phplint ./ --exclude=vendor
  only:
    - newpipe

# triggers the frontend project pipeline which will connect to EC2 server pull down latest changes for both front and back, then build and integrate
trigger:
  stage: trigger
  trigger:
    project: final-project24/frontend
    branch: newpipe


# do not need to do anymore as once all recent changes pushed, will trigger frontend project pipeline which will connect to EC2 server pull down latest changes for both front and back, then build and integrate
# integrate:
#   stage: integrate
#   tags:
#     - project
#   before_script:
#     - echo "Integrate Stage"
#   script:
#     # removes the old build artifacts
#     - rm -r public/static
#     - rm resources/views/index.blade.php
#     # Personal Access Token added to account and used to access latest frontend pipeline build job artifacts
#     - 'curl --location --output artifacts.zip --header "PRIVATE-TOKEN: ${TOKEN}" --request GET "https://gitlab.com/api/v4/projects/30472412/jobs/artifacts/cicd/download?job=build"'
#     - unzip -o artifacts.zip
#     # updates the new build artifacts
#     - cp -r ./dist/static ./public
#     - cp ./dist/index.html ../backend/resources/views/index.blade.php
#     # commits the new artifacts to the backend repo
#     - git remote set-url origin git@gitlab.com:final-project24/backend.git
#     - git remote set-url --push origin git@gitlab.com:final-project24/backend.git
#     - git add .
#     - git commit -m "[ci skip] new frontend build curled, integrated and committed"
#     - git push origin HEAD:$CI_COMMIT_REF_NAME
#     # new updated build now included in repo, will be present when pulled on server in deploy job
#     # need to pull locally
#   only:
#     - cicd

# deployed by frontend instead which is triggered by backend, frontend will then connect and pull latest changes on server so both up to date
# deploy:
#   image: alpine:latest
#   stage: deploy
#   tags:
#     - project
#   before_script:
#     - echo "Deploy Stage"
#     - 'command -v ssh-agent >/dev/null || ( apk add --update openssh )'
#     # checks if ssh-agent is already installed and if not, then install it
#     - eval $(ssh-agent -s)
#     # starts ssh-agent
#     - echo "$EC2_SSH_KEY" | tr -d '\r' | ssh-add -
#     # adds ssh private key stored in variable EC2_SSH_KEY to agent store
#     - mkdir -p ~/.ssh
#     - chmod 700 ~/.ssh
#     # creates .ssh directory and assign correct permissions
#     - ssh-keyscan $EC2_IP >> ~/.ssh/known_hosts
#     # checks public key on remote server using IP address stored in EC2_IP variable and adds it to known hosts.
#     # It is protecting from men-in-the-middle attack and is necessary to work, otherwise the job will fail.
#     - chmod 644 ~/.ssh/known_hosts
#     # assign correct permissions
#   script:
#     - ssh $EC2_USER@$EC2_IP "/bin/bash -s " < deploy.sh
#     # when before script is complete and ssh connection from runner to server has been established
#     # connect to the server and run deploy script - fetches and pulls changes
#   only:
#     - cicd